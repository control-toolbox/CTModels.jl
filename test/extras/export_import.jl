using Pkg
Pkg.add("JSON3")
Pkg.add("JLD2")
using NLPModelsIpopt
using CTModels
using CTDirect
import CTParser: CTParser, @def
CTParser.set_prefix(:CTModels); # code generated by @def is prefixed by CTModels (not by OptimalControl - the default)

ocp = @def begin

    t ∈ [0, 1], time
    x ∈ R², state
    u ∈ R, control

    x₂(t) ≤ 1.2

    x(0) == [-1, 0]
    x(1) == [0, 0]

    ẋ(t) == [x₂(t), u(t)]

    ∫( 0.5u(t)^2 ) → min

end;

sol = CTDirect.solve(ocp)

using JLD2
CTModels.export_ocp_solution(sol; filename="my_solution")
sol_jld = CTModels.import_ocp_solution(ocp; filename="my_solution")
println("Objective from computed solution: ", CTModels.objective(sol))
println("Objective from imported solution: ", CTModels.objective(sol_jld))

using JSON3
CTModels.export_ocp_solution(sol; filename="my_solution", format=:JSON)
sol_json = CTModels.import_ocp_solution(ocp; filename="my_solution", format=:JSON)
println("Objective from computed solution: ", CTModels.objective(sol))
println("Objective from imported solution: ", CTModels.objective(sol_json))

# Clean up
Pkg.rm("JLD2")
Pkg.rm("JSON3")