var documenterSearchIndex = {"docs":
[{"location":"api.html","page":"API","title":"API","text":"CurrentModule = CTModels","category":"page"},{"location":"api.html","page":"API","title":"API","text":"Pages = [\"api.md\"]","category":"page"},{"location":"api.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"api.html","page":"API","title":"API","text":"This page is a dump of all the docstrings found in the code. ","category":"page"},{"location":"api.html","page":"API","title":"API","text":"Modules = [CTModels]\nOrder = [:module, :type, :function, :macro]","category":"page"},{"location":"api.html#CTModels.AbstractControlModel","page":"API","title":"CTModels.AbstractControlModel","text":"abstract type AbstractControlModel\n\n\n\n\n\n","category":"type"},{"location":"api.html#CTModels.AbstractOptimalControlModel","page":"API","title":"CTModels.AbstractOptimalControlModel","text":"abstract type AbstractOptimalControlModel\n\n\n\n\n\n","category":"type"},{"location":"api.html#CTModels.AbstractStateModel","page":"API","title":"CTModels.AbstractStateModel","text":"abstract type AbstractStateModel\n\n\n\n\n\n","category":"type"},{"location":"api.html#CTModels.ControlModel","page":"API","title":"CTModels.ControlModel","text":"struct ControlModel <: CTModels.AbstractControlModel\n\nFields\n\ndimension::Int64\nname::String\ncomponents::Vector{String}\n\n\n\n\n\n","category":"type"},{"location":"api.html#CTModels.OptimalControlModel","page":"API","title":"CTModels.OptimalControlModel","text":"struct OptimalControlModel{ControlModelType<:CTModels.AbstractControlModel, StateModelType<:CTModels.AbstractStateModel} <: CTModels.AbstractOptimalControlModel\n\nFields\n\ncontrol::CTModels.AbstractControlModel\nstate::CTModels.AbstractStateModel\n\n\n\n\n\n","category":"type"},{"location":"api.html#CTModels.OptimalControlModelMutable","page":"API","title":"CTModels.OptimalControlModelMutable","text":"mutable struct OptimalControlModelMutable <: CTModels.AbstractOptimalControlModel\n\nFields\n\ncontrol::Union{Nothing, CTModels.AbstractControlModel}: Default: nothing\nstate::Union{Nothing, CTModels.AbstractStateModel}: Default: nothing\n\n\n\n\n\n","category":"type"},{"location":"api.html#CTModels.StateModel","page":"API","title":"CTModels.StateModel","text":"struct StateModel <: CTModels.AbstractStateModel\n\nFields\n\ndimension::Int64\nname::String\ncomponents::Vector{String}\n\n\n\n\n\n","category":"type"},{"location":"api.html#CTModels.__control_components-Tuple{Int64, String}","page":"API","title":"CTModels.__control_components","text":"__control_components(\n    m::Int64,\n    name::String\n) -> Vector{String}\n\n\nUsed to set the default value of the names of the controls. The default value is [\"u\"] for a one dimensional control, and [\"u₁\", \"u₂\", ...] for a multi dimensional control.\n\n\n\n\n\n","category":"method"},{"location":"api.html#CTModels.__control_name-Tuple{}","page":"API","title":"CTModels.__control_name","text":"__control_name() -> String\n\n\nUsed to set the default value of the names of the control. The default value is \"u\".\n\n\n\n\n\n","category":"method"},{"location":"api.html#CTModels.__is_control_set-Tuple{CTModels.OptimalControlModelMutable}","page":"API","title":"CTModels.__is_control_set","text":"__is_control_set(\n    ocp::CTModels.OptimalControlModelMutable\n) -> Bool\n\n\n\n\n\n\n","category":"method"},{"location":"api.html#CTModels.__is_state_set-Tuple{CTModels.OptimalControlModelMutable}","page":"API","title":"CTModels.__is_state_set","text":"__is_state_set(\n    ocp::CTModels.OptimalControlModelMutable\n) -> Bool\n\n\n\n\n\n\n","category":"method"},{"location":"api.html#CTModels.__state_components-Tuple{Int64, String}","page":"API","title":"CTModels.__state_components","text":"__state_components(n::Int64, name::String) -> Vector{String}\n\n\nUsed to set the default value of the names of the states. The default value is [\"x\"] for a one dimensional state, and [\"x₁\", \"x₂\", ...] for a multi dimensional state.\n\n\n\n\n\n","category":"method"},{"location":"api.html#CTModels.__state_name-Tuple{}","page":"API","title":"CTModels.__state_name","text":"__state_name() -> String\n\n\nUsed to set the default value of the name of the state. The default value is \"x\".\n\n\n\n\n\n","category":"method"},{"location":"api.html#CTModels.control!-Union{Tuple{T2}, Tuple{T1}, Tuple{CTModels.OptimalControlModelMutable, Int64}, Tuple{CTModels.OptimalControlModelMutable, Int64, T1}, Tuple{CTModels.OptimalControlModelMutable, Int64, T1, Vector{T2}}} where {T1<:Union{String, Symbol}, T2<:Union{String, Symbol}}","page":"API","title":"CTModels.control!","text":"control!(ocp::CTModels.OptimalControlModelMutable, m::Int64)\ncontrol!(\n    ocp::CTModels.OptimalControlModelMutable,\n    m::Int64,\n    name::Union{String, Symbol}\n)\ncontrol!(\n    ocp::CTModels.OptimalControlModelMutable,\n    m::Int64,\n    name::Union{String, Symbol},\n    components_names::Array{T2<:Union{String, Symbol}, 1}\n)\n\n\nDefine the control dimension and possibly the names of each coordinate.\n\nnote: Note\nYou must use control! only once to set the control dimension.\n\nExamples\n\njulia> control!(ocp, 1)\njulia> control_dimension(ocp)\n1\njulia> control_components(ocp)\n[\"u\"]\n\njulia> control!(ocp, 1, \"v\")\njulia> control_dimension(ocp)\n1\njulia> control_components(ocp)\n[\"v\"]\n\njulia> control!(ocp, 2)\njulia> control_dimension(ocp)\n2\njulia> control_components(ocp)\n[\"u₁\", \"u₂\"]\n\njulia> control!(ocp, 2, :v)\njulia> control_dimension(ocp)\n2\njulia> control_components(ocp)\n[\"v₁\", \"v₂\"]\n\njulia> control!(ocp, 2, \"v\")\njulia> control_dimension(ocp)\n2\njulia> control_components(ocp)\n[\"v₁\", \"v₂\"]\n\njulia> control!(ocp, 2, \"v\", [\"a\", \"b\"])\njulia> control_dimension(ocp)\n2\njulia> control_components(ocp)\n[\"a\", \"b\"]\n\njulia> control!(ocp, 2, \"v\", [:a, :b])\njulia> control_dimension(ocp)\n2\njulia> control_components(ocp)\n[\"a\", \"b\"]\n\n\n\n\n\n","category":"method"},{"location":"api.html#CTModels.state!-Union{Tuple{T2}, Tuple{T1}, Tuple{CTModels.OptimalControlModelMutable, Int64}, Tuple{CTModels.OptimalControlModelMutable, Int64, T1}, Tuple{CTModels.OptimalControlModelMutable, Int64, T1, Vector{T2}}} where {T1<:Union{String, Symbol}, T2<:Union{String, Symbol}}","page":"API","title":"CTModels.state!","text":"state!(ocp::CTModels.OptimalControlModelMutable, n::Int64)\nstate!(\n    ocp::CTModels.OptimalControlModelMutable,\n    n::Int64,\n    name::Union{String, Symbol}\n)\nstate!(\n    ocp::CTModels.OptimalControlModelMutable,\n    n::Int64,\n    name::Union{String, Symbol},\n    components_names::Array{T2<:Union{String, Symbol}, 1}\n)\n\n\nDefine the state dimension and possibly the names of each component.\n\nnote: Note\nYou must use state! only once to set the state dimension.\n\nExamples\n\njulia> state!(ocp, 1)\njulia> state_dimension(ocp)\n1\njulia> state_components(ocp)\n[\"x\"]\n\njulia> state!(ocp, 1, \"y\")\njulia> state_dimension(ocp)\n1\njulia> state_components(ocp)\n[\"y\"]\n\njulia> state!(ocp, 2)\njulia> state_dimension(ocp)\n2\njulia> state_components(ocp)\n[\"x₁\", \"x₂\"]\n\njulia> state!(ocp, 2, :y)\njulia> state_dimension(ocp)\n2\njulia> state_components(ocp)\n[\"y₁\", \"y₂\"]\n\njulia> state!(ocp, 2, \"y\")\njulia> state_dimension(ocp)\n2\njulia> state_components(ocp)\n[\"y₁\", \"y₂\"]\n\njulia> state!(ocp, 2, \"y\", [\"u\", \"v\"])\njulia> state_dimension(ocp)\n2\njulia> state_components(ocp)\n[\"u\", \"v\"]\n\njulia> state!(ocp, 2, \"y\", [:u, :v])\njulia> state_dimension(ocp)\n2\njulia> state_components(ocp)\n[\"u\", \"v\"]\n\n\n\n\n\n","category":"method"},{"location":"index.html#CTModels","page":"Introduction","title":"CTModels","text":"","category":"section"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"Documentation for CTModels.","category":"page"},{"location":"index.html#Dependencies","page":"Introduction","title":"Dependencies","text":"","category":"section"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"All the numerical simulations to generate this documentation are performed with the following packages.","category":"page"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"using Pkg\nPkg.status()","category":"page"}]
}
